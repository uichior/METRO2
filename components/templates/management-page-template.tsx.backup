"use client"

import { useState, useEffect, useRef, type ReactNode, useMemo } from "react"
import { ActionButton } from "@/components/common/management-list"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { MoreHorizontal, Search, Download, Plus, ChevronDown, User } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Switch } from "@/components/ui/switch"

// 基本的なアイテムの型定義
export interface BaseItem {
  id: string
  name?: string
  status?: string
  [key: string]: any
}

// テンプレートのプロパティ定義
export interface ManagementPageTemplateProps<T extends BaseItem> {
  // ページタイトルと説明
  title: string
  itemName: string
  
  // データ関連
  items: T[]
  
  // コンポーネント
  filterPanel?: ReactNode // フィルターパネル
  listItemComponent: (props: { item: T; isSelected: boolean; onSelect: (item: T) => void }) => ReactNode
  detailComponent: (props: { selectedItem: T | null }) => ReactNode
  
  // アクション
  onAddNew?: () => void
  onExport?: () => void
  actionButtons?: ActionButton[]
  
  // 選択状態
  selectedIds?: string[]
  onSelectionChange?: (selectedIds: string[]) => void
}

export function ManagementPageTemplate<T extends BaseItem>({
  title,
  itemName,
  items,
  filterPanel,
  listItemComponent,
  detailComponent,
  onAddNew,
  onExport,
  actionButtons = [],
  selectedIds = [],
  onSelectionChange,
}: ManagementPageTemplateProps<T>) {
  // 状態管理
  const [selectedItem, setSelectedItem] = useState<T | null>(items.length > 0 ? items[0] : null)
  const [searchTerm, setSearchTerm] = useState<string>("")
  const [showIncompleteOnly, setShowIncompleteOnly] = useState<boolean>(false)
  const [selectedItems, setSelectedItems] = useState<string[]>(selectedIds || [])
  const [isFilterPanelOpen, setIsFilterPanelOpen] = useState<boolean>(true)

  // 親コンポーネントからの選択状態を反映
  useEffect(() => {
    const currentIds = JSON.stringify(selectedIds || [])
    const storedIds = JSON.stringify(selectedItems)
    
    if (currentIds !== storedIds) {
      setSelectedItems(selectedIds || [])
    }
  }, [selectedIds])

  // フィルタリングされたアイテムのリスト
  const filteredItems = useMemo(() => {
    return items.filter((item: T) => {
      // 検索フィルター
      const matchesSearch = searchTerm === '' || 
        (item.name && item.name.toLowerCase().includes(searchTerm.toLowerCase()))

      // 未完了のみフィルター
      const matchesStatus = !showIncompleteOnly || 
        (item.status && item.status.toLowerCase() !== 'completed')

      return matchesSearch && matchesStatus
    })
  }, [items, searchTerm, showIncompleteOnly])

  // 選択アイテムの切り替え
  function handleSelectItem(item: T) {
    setSelectedItem(item)
  }
  
  // 選択状態の変更を親コンポーネントに伝える
  const prevSelectedItemsRef = useRef<string[]>([])
  
  useEffect(() => {
    if (onSelectionChange && JSON.stringify(prevSelectedItemsRef.current) !== JSON.stringify(selectedItems)) {
      onSelectionChange(selectedItems)
      prevSelectedItemsRef.current = [...selectedItems]
    }
  }, [selectedItems, onSelectionChange])

  // アイテム選択の切り替え
  function toggleItemSelection(itemId: string, checked: boolean) {
    if (checked) {
      setSelectedItems((prev) => [...prev, itemId])
    } else {
      setSelectedItems((prev) => prev.filter((id) => id !== itemId))
    }
  }

  // 全選択の切り替え
  function toggleSelectAll() {
    if (selectedItems.length === filteredItems.length) {
      setSelectedItems([])
    } else {
      setSelectedItems(filteredItems.map((item: T) => item.id))
    }
  }

  // フィルターパネルの開閉
  function toggleFilterPanel() {
    setIsFilterPanelOpen(!isFilterPanelOpen)
  }

  // 検索語句の変更
  function handleSearchChange(e: React.ChangeEvent<HTMLInputElement>) {
    setSearchTerm(e.target.value)
  }

  // 未完了のみ表示の切り替え
  function handleIncompleteOnlyChange(checked: boolean) {
    setShowIncompleteOnly(checked)
  }

  return (
    <div className="flex h-full flex-col">
      {/* ヘッダー */}
      <div className="flex items-center justify-between border-b p-4">
        <h1 className="text-xl font-semibold">{title}</h1>
        <div className="flex items-center space-x-2">
          {onAddNew && (
            <Button onClick={onAddNew} size="sm">
              <Plus className="mr-1 h-4 w-4" />
              新規{itemName}
            </Button>
          )}
          {onExport && (
            <Button onClick={onExport} variant="outline" size="sm">
              <Download className="mr-1 h-4 w-4" />
              エクスポート
            </Button>
          )}
          {actionButtons.length > 0 && (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm">
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                {actionButtons.map((button) => (
                  <DropdownMenuItem key={button.label} onClick={button.onClick}>
                    {button.icon && <button.icon className="mr-2 h-4 w-4" />}
                    {button.label}
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
          )}
        </div>
      </div>

      {/* メインコンテンツ */}
      <div className="flex flex-1 overflow-hidden">
        {/* サイドバー */}
        <div className="flex w-64 flex-col border-r bg-black text-white">
          {/* フィルターヘッダー */}
          <div className="flex items-center justify-between border-b border-gray-700 p-3">
            <h2 className="font-medium">フィルター</h2>
            <Button
              variant="ghost"
              size="sm"
              onClick={toggleFilterPanel}
              className="text-white hover:bg-gray-800"
            >
              <ChevronDown
                className={`h-4 w-4 transition-transform ${isFilterPanelOpen ? '' : 'rotate-180'}`}
              />
            </Button>
          </div>

          {/* 検索ボックス */}
          <div className="p-3">
            <div className="relative">
              <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-400" />
              <Input
                placeholder={`${itemName}を検索...`}
                value={searchTerm}
                onChange={handleSearchChange}
                className="pl-8 bg-gray-800 border-gray-700 text-white"
              />
            </div>
            <div className="mt-2 flex items-center justify-between">
              <span className="text-sm">未完のみ</span>
              <Switch
                checked={showIncompleteOnly}
                onCheckedChange={handleIncompleteOnlyChange}
              />
            </div>
          </div>

          {/* フィルターパネル */}
          {isFilterPanelOpen && filterPanel && (
            <div className="border-t border-gray-700 p-3">{filterPanel}</div>
          )}

          {/* アイテムリスト */}
          <div className="flex-1 overflow-auto">
            <div className="p-3">
              {filteredItems.length === 0 ? (
                <div className="flex flex-col items-center justify-center py-8 text-center text-gray-400">
                  <User className="mb-2 h-8 w-8" />
                  <p>該当する{itemName}がありません</p>
                </div>
              ) : (
                <div className="space-y-2">
                  {filteredItems.map((item: T) => (
                    <div
                      key={item.id}
                      onClick={() => handleSelectItem(item)}
                      className={`cursor-pointer rounded-md p-2 ${selectedItem?.id === item.id ? 'bg-blue-600' : 'hover:bg-gray-800'}`}
                    >
                      {listItemComponent({
                        item,
                        isSelected: selectedItem?.id === item.id,
                        onSelect: handleSelectItem,
                      })}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* ステータスバー */}
          <div className="border-t border-gray-700 p-2 text-sm">
            <p>{filteredItems.length} 件の{itemName}</p>
          </div>
        </div>

        {/* 詳細パネル */}
        <div className="flex-1 overflow-auto p-4">
          {detailComponent({ selectedItem })}
        </div>
      </div>
    </div>
  )
}
